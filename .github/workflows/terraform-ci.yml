name: Terraform CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  terraform:
    name: Terraform Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.12.2"

    - name: Terraform Format Check
      run: terraform fmt -check -recursive

    - name: Terraform Init
      run: terraform init -backend=false

    - name: Terraform Validate
      run: terraform validate

    - name: TFLint Setup
      uses: terraform-linters/setup-tflint@v4

    - name: TFLint Run
      run: |
        tflint --init
        tflint --recursive

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: tfsec
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        soft_fail: true

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for sensitive data
      run: |
        # Check for actual sensitive values in committed files only
        echo "Checking for actual sensitive data patterns in committed files..."
        
        # Look for patterns that indicate actual secrets (not variable names)
        SENSITIVE_PATTERNS=(
          # Actual passwords/secrets (not variable declarations)
          'password\s*=\s*"[^"]*[a-zA-Z0-9]{8,}"'
          'secret\s*=\s*"[^"]*[a-zA-Z0-9]{8,}"'
          'token\s*=\s*"[^"]*[a-zA-Z0-9]{8,}"'
          # API keys and tokens (long strings)
          '"[A-Za-z0-9]{32,}"'
          # Common secret patterns
          'sk-[a-zA-Z0-9]{48,}'
          'ghp_[a-zA-Z0-9]{36}'
        )
        
        FOUND_ISSUES=false
        
        for pattern in "${SENSITIVE_PATTERNS[@]}"; do
          # Exclude terraform.tfvars (local config), .example files, docs, and comments
          if grep -r --include="*.tf" --include="*.md" -E "$pattern" . | grep -v ".example" | grep -v "terraform.tfvars" | grep -v "README.md" | grep -v "# " | grep -v "//" | grep -v "description" | grep -v "output"; then
            echo "Found potential sensitive data matching pattern: $pattern"
            FOUND_ISSUES=true
          fi
        done
        
        # Check for Azure subscription IDs in .tf files (not tfvars)
        # Exclude Azure built-in role definition GUIDs (these are public constants)
        if grep -r --include="*.tf" -E '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}' . | grep -v ".example" | grep -v "terraform.tfvars" | grep -v "# " | grep -v "//" | grep -v "00000000-0000-0000-0000-000000000002"; then
          echo "Found potential Azure subscription IDs in Terraform files"
          FOUND_ISSUES=true
        fi
        
        if [ "$FOUND_ISSUES" = true ]; then
          echo "Found potential sensitive data in committed files"
          exit 1
        fi
        
        echo "No sensitive data found in committed files - all clear!"

    - name: Validate README
      run: |
        if [ ! -f README.md ]; then
          echo "README.md is missing"
          exit 1
        fi
